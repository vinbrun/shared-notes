name: Deploy to VM

on:
  workflow_run:
    workflows: ["Docker Build"]  # Name of the triggering workflow
    types:
      - completed  # Run only when "Docker Build" workflow is completed successfully
      
env:
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  DEPLOY_HOST: "sharednotes.app"
  DEPLOY_USER: "ubuntu"
  REPO_PATH: "/home/ubuntu/shared-notes"
  DOCKER_COMPOSE_FILE: "docker-compose.yml"
  VERSION: "latest" 

jobs:
  deploy:
    if: ${{ github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Setup SSH with Passphrase
        env:
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "Setting up SSH directory and permissions..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          echo "Adding deploy host to known_hosts..."
          ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          # Set up ssh-agent with a fixed socket path and add the key
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          echo "echo $SSH_PASSPHRASE" > ~/.ssh_askpass && chmod +x ~/.ssh_askpass
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | DISPLAY=None SSH_ASKPASS=~/.ssh_askpass ssh-add - >/dev/null

      - name: Test SSH Connection
        run: |
          echo "Testing SSH connection to ensure configuration is correct..."
          ssh -v -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_HOST "echo 'SSH connection successful'"
          
      - name: Copy docker-compose.yml and dockerfile to VPS
        run: |
          echo "Sending docker-compose.yml and dockerfile to the VPS" 
          ssh -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_HOST "mkdir -p $REPO_PATH"
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no docker-compose.yml $DEPLOY_USER@$DEPLOY_HOST:$REPO_PATH/docker-compose.yml

      - name: Pull Docker Image and Deploy
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "Deploying Docker container on remote server..."
          ssh -v -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_HOST << EOF
            set -e  # Exit immediately if any command fails

            cd $REPO_PATH

            echo "Logging in to Docker Hub..."
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

            DEPLOY_LABEL=$(date +%s)  # Generate a unique label based on the current timestamp

            # Step 1: Pull new images
            echo "Pulling latest images defined in Docker Compose..."
            docker compose -f $DOCKER_COMPOSE_FILE pull

            # Step 2: Run new containers with a unique deployment label
            echo "Starting new containers with deployment label: deploy=$DEPLOY_LABEL"
            docker compose -f $DOCKER_COMPOSE_FILE up -d --remove-orphans

            # Step 3: Apply label to new containers
            echo "Applying deployment label to new containers..."
            for container in \$(docker compose -f $DOCKER_COMPOSE_FILE ps -q); do
              docker container update --label deploy=$DEPLOY_LABEL "\$container"
            done

            # Step 4: Stop and remove old containers (those without the current deployment label)
            echo "Stopping and removing old containers..."
            set +e  # Temporarily disable exit-on-error for cleanup
            docker ps -q --filter "label=deploy" --filter "label!=deploy=$DEPLOY_LABEL" | xargs -r docker stop
            docker ps -q --filter "label=deploy" --filter "label!=deploy=$DEPLOY_LABEL" | xargs -r docker rm

            # Step 5: Clean up old images
            echo "Removing unused images..."
            docker image prune -f
            set -e  # Re-enable exit-on-error for critical steps

            echo "Deployment completed successfully."

            echo "Cleaning docker credentials..."
            docker logout
          EOF

      - name: Clean Up docker credentials
        if: always()
        run: |
          echo "Cleaning docker credentials..."
          ssh -v -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_HOST << EOF
            docker logout || "no credentials to remove"
          EOF
            
      - name: Clean Up Local SSH Keys
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa ~/.ssh_askpass ~/.ssh/known_hosts
